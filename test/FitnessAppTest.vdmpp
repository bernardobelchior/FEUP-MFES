class FitnessAppTest is subclass of Test
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations
	public static main() == (
		new UserTest().test();
		new WorkoutTest().test();
		new ChallengeTest().test();
		new RouteTest().test();
		new FitnessAppTest().test();
	);
	
	public createFitnessApp() res: FitnessApp == (
		return new FitnessApp({new User("Nuno", "Ramos", "a@b.c", "12345678", 70, 1.70), new User("Bernardo", "Belchior", "a@b.c", "12345678", 70, 1.70)});
	);
	
	public testAddUser() == (
		dcl f: FitnessApp := createFitnessApp();
		dcl u: User := new User("John", "Doe", "a@b.c", "12345678", 70, 1.70);
		assert(not f.userExists(u));
		f.addUser(u);
		assert(f.userExists(u));
	);

	public testSuccessfulLogin() == (
		dcl f: FitnessApp := createFitnessApp();
		dcl u: User := new User("John", "Doe", "a@b.c", "12345678", 70, 1.70);
		f.addUser(u);
		assert(not f.isLoggedIn());
		assert(f.login("a@b.c", "12345678"));
		assert(f.isLoggedIn());
	);

	public testUnsuccessfulLogin() == (
		dcl f: FitnessApp := createFitnessApp();
		dcl u: User := new User("John", "Doe", "a@b.c", "12345678", 70, 1.70);
		f.addUser(u);
		assert(not f.isLoggedIn());
		assert(not f.login("invalid", "invalid")); -- Tests if password < 8
		assert(not f.isLoggedIn());
		assert(not f.login("invalid", "invalid1")); -- Tests if email, password is not found
		assert(not f.isLoggedIn());
	);
	
	public testLogout() == (
		dcl f: FitnessApp := createFitnessApp();
		dcl u: User := new User("John", "Doe", "a@b.c", "12345678", 70, 1.70);
		f.addUser(u);
		assert(not f.isLoggedIn());
		assert(f.login("a@b.c", "12345678"));
		assert(f.isLoggedIn());
		f.logout();
		assert(not f.isLoggedIn());
	);
	
	public testAddChallenge() == (
		dcl f: FitnessApp := createFitnessApp();
		dcl c: Challenge := new Challenge("Test", "Because we need to test", mk_Types`Date(2018, 1, 1), mk_Types`Date(2018, 2, 1), 10, 0);
		f.addChallenge(c);
		assert(c in set elems f.getChallenges());
	);

	public test() == (
		testAddUser();
		testSuccessfulLogin();
		testUnsuccessfulLogin();
		testLogout();
		testAddChallenge();
		)
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end FitnessAppTest