class RhythmChallengeTest is subclass of Test
operations
	public createRhythmChallenge: Admin ==> RhythmChallenge 
	createRhythmChallenge(a) ==
		return new RhythmChallenge(a, "Testing Challenge", "Lets test Challenge class", mk_Types`Date(2017,12,24), mk_Types`Date(2017,12,30), 20);
	
	public createAdmin: () ==> Admin 
	createAdmin() == 
		return new Admin("Bernardo", "Belchior", "b@b.c", "12345678", 70, 1.70, <Masculine>);	
	
	public createUser: () ==> User 
	createUser() ==
		return new User("Nuno", "Ramos", "a@b.c", "12345678", 70, 1.70, <Masculine>);	

	public testChallenge: () ==> ()
	testChallenge() == (
		dcl c: RhythmChallenge := createRhythmChallenge(createAdmin());
		assert(c.name = "Testing Challenge");
		assert(c.description = "Lets test Challenge class");
		assert(c.startDate = mk_Types`Date(2017,12,24));
		assert(c.endDate = mk_Types`Date(2017,12,30));
	);

	public testCompleteChallenge: () ==> ()
	testCompleteChallenge() == (
		dcl c: RhythmChallenge := createRhythmChallenge(createAdmin());
		dcl w: Workout := new Workout("Morning Run", mk_Types`DateTime(mk_Types`Date(2017,12,21), mk_Types`Time(16, 37, 00)), <Running>, mk_Types`Point(0, 0));
		dcl u: User := createUser();
		dcl p: Types`Point := mk_Types`Point(10, 10);
		w.addPoint(p);
		w.endWorkout(u, mk_Types`Duration(0, 20, 0));
		assert(true = c.verifyChallenge(w));
		c.addCompletedUser(u);
		assert(u in set elems c.getCompleted());
	);

	public testGoalDescription: () ==> ()
	testGoalDescription() == (
		dcl c: RhythmChallenge := createRhythmChallenge(createAdmin());
		dcl a: seq of char := c.getGoalDescription();
		assert(a = "Run at a pace of %s min/km");
	);
	
	public test: () ==> ()
	test() == (
		testChallenge();
		testCompleteChallenge();
		testGoalDescription();
	)	
end RhythmChallengeTest