class FitnessAppTest is subclass of Test
operations
	public static main() == (
		new UserTest().test();
		new WorkoutTest().test();
		new CalorieChallengeTest().test();
		new DistanceChallengeTest().test();
		new RhythmChallengeTest().test();
		new RouteTest().test();
		new FitnessAppTest().test();
	);
	
	public createFitnessApp: () ==> FitnessApp 
	createFitnessApp() == (
		return new FitnessApp({new User("Nuno", "Ramos", "a@b.c", "12345678", 70, 1.70, <Masculine>), new User("Bernardo", "Belchior", "z@z.c", "12345678", 70, 1.70, <Masculine>)});
	);
	
	public createAdmin: () ==> Admin 
	createAdmin() == 
		return new Admin("Bernardo", "Belchior", "b@b.c", "12345678", 70, 1.70, <Masculine>);	

	public testAddRepeatedAdmin: () ==> ()
	testAddRepeatedAdmin() == (
		dcl f: FitnessApp := createFitnessApp();
		dcl a: Admin := new Admin("John", "Doe", "b@b.d", "12345678", 70, 1.70, <Masculine>);
		dcl userLen: nat := card f.getUsers();
		dcl adminLen: nat := card f.getAdmins();

		assert(not f.adminExists(a));
		assert(not f.userExists(a));
		assert(f.addAdmin(a));

		assert(f.addAdmin(a) = false);
		assert(card f.getUsers() = userLen + 1);
		assert(card f.getAdmins() = adminLen + 1);
	);

	public testAddAdmin: () ==> ()
	testAddAdmin() == (
		dcl f: FitnessApp := createFitnessApp();
		dcl a: Admin := new Admin("John", "Doe", "b@b.d", "12345678", 70, 1.70, <Masculine>);
		assert(not f.adminExists(a));
		assert(not f.userExists(a));
		assert(f.addAdmin(a));
		assert(f.userExists(a));
		assert(f.adminExists(a));
	);

	public testAddRepeatedUser: () ==> ()
	testAddRepeatedUser() == (
		dcl f: FitnessApp := createFitnessApp();
		dcl u: User := new User("John", "Doe", "b@b.d", "12345678", 70, 1.70, <Masculine>);
		dcl userLen: nat := card f.getUsers();
		dcl adminLen: nat := card f.getAdmins();
		assert(not f.userExists(u));

		assert(f.addUser(u));
		assert(f.addUser(u) = false);

		assert(card f.getUsers() = userLen + 1);
		assert(card f.getAdmins() = adminLen);
	);

	public testAddUser: () ==> ()
	testAddUser() == (
		dcl f: FitnessApp := createFitnessApp();
		dcl u: User := new User("John", "Doe", "b@b.d", "12345678", 70, 1.70, <Masculine>);
		assert(not f.userExists(u));
		assert(f.addUser(u));
		assert(f.userExists(u));
	);

	public testAdminSuccessfulLogin: () ==> ()
	testAdminSuccessfulLogin() == (
		dcl f: FitnessApp := createFitnessApp();
		dcl a: Admin := new Admin("John", "Doe", "d@d.b", "12345678", 70, 1.70, <Masculine>);
		assert(f.addAdmin(a));
		assert(not f.isAdminLoggedIn());
		assert(not f.isLoggedIn());
		assert(f.login("d@d.b", "12345678"));
		assert(f.isAdminLoggedIn());
		assert(f.isLoggedIn());
		assert(f.getLoggedInUser() = a);
		assert(f.getLoggedInAdmin() = a);
	);

	public testAdminUnsuccessfulLogin: () ==> ()
	testAdminUnsuccessfulLogin() == (
		dcl f: FitnessApp := createFitnessApp();
		dcl a: Admin := new Admin("John", "Doe", "d@d.c", "12345678", 70, 1.70, <Masculine>);
		assert(f.addAdmin(a));
		assert(not f.isAdminLoggedIn());
		assert(not f.isLoggedIn());
		assert(not f.login("a", "invalid")); -- Tests if len email < 5
		assert(not f.isAdminLoggedIn());
		assert(not f.isLoggedIn());
		assert(not f.login("invalid", "invalid")); -- Tests if len password < 8
		assert(not f.isAdminLoggedIn());
		assert(not f.isLoggedIn());
		assert(not f.login("invalid", "invalid1")); -- Tests if combination email, password is not found
		assert(not f.isAdminLoggedIn());
		assert(not f.isLoggedIn());
		assert(f.getLoggedInUser() = nil);
		assert(f.getLoggedInAdmin() = nil);
	);

	public testUserSuccessfulLogin: () ==> ()
	testUserSuccessfulLogin() == (
		dcl f: FitnessApp := createFitnessApp();
		dcl u: User := new User("John", "Doe", "d@d.b", "12345678", 70, 1.70, <Masculine>);
		assert(f.addUser(u));
		assert(not f.isAdminLoggedIn());
		assert(not f.isLoggedIn());
		assert(f.login("d@d.b", "12345678"));
		assert(not f.isAdminLoggedIn());
		assert(f.isLoggedIn());
		assert(f.getLoggedInUser() = u);
		assert(f.getLoggedInAdmin() = nil);
	);

	public testUserUnsuccessfulLogin: () ==> ()
	testUserUnsuccessfulLogin() == (
		dcl f: FitnessApp := createFitnessApp();
		dcl u: User := new User("John", "Doe", "d@b.d", "12345678", 70, 1.70, <Masculine>);
		assert(f.addUser(u));
		assert(not f.isAdminLoggedIn());
		assert(not f.isLoggedIn());
		assert(not f.login("a", "invalid")); -- Tests if len email < 5
		assert(not f.isAdminLoggedIn());
		assert(not f.isLoggedIn());
		assert(not f.login("invalid", "invalid")); -- Tests if len password < 8
		assert(not f.isAdminLoggedIn());
		assert(not f.isLoggedIn());
		assert(not f.login("invalid", "invalid1")); -- Tests if combination email, password is not found
		assert(not f.isAdminLoggedIn());
		assert(not f.isLoggedIn());
		assert(f.getLoggedInUser() = nil);
		assert(f.getLoggedInAdmin() = nil);
	);
	
	public testLogout: () ==> ()
	testLogout() == (
		dcl f: FitnessApp := createFitnessApp();
		dcl u: User := new User("John", "Doe", "d@b.c", "12345678", 70, 1.70, <Masculine>);
		assert(f.addUser(u));
		assert(not f.isLoggedIn());
		assert(f.login("a@b.c", "12345678"));
		assert(f.isLoggedIn());
		f.logout();
		assert(not f.isLoggedIn());
		assert(not f.isAdminLoggedIn());
	);
	
	public testAddChallengeWithAdminInSystem: () ==> ()
	testAddChallengeWithAdminInSystem() == (
		dcl f: FitnessApp := createFitnessApp();
		dcl a: Admin := createAdmin();
		dcl c: Challenge := new DistanceChallenge(a, "Test", "Because we need to test", mk_Types`Date(2018, 1, 1), mk_Types`Date(2018, 2, 1), 10);
		assert(f.addAdmin(a));
		assert(f.login("b@b.c", "12345678"));
		f.addChallenge(c);
		assert(c in set elems f.getChallenges());
	);
	
	public testAddChallengeWithoutAdminInSystem: () ==> ()
	testAddChallengeWithoutAdminInSystem() == (
		dcl f: FitnessApp := createFitnessApp();
		dcl c: Challenge := new DistanceChallenge(createAdmin(), "Test", "Because we need to test", mk_Types`Date(2018, 1, 1), mk_Types`Date(2018, 2, 1), 10);
		f.addChallenge(c);
		assert(not c in set elems f.getChallenges());
	);

	public test: () ==> ()
	test() == (
		testAddAdmin();
		testAddRepeatedAdmin();
		testAddUser();
		testAddRepeatedUser();
		testAdminSuccessfulLogin();
		testAdminUnsuccessfulLogin();
		testUserSuccessfulLogin();
		testUserUnsuccessfulLogin();
		testLogout();
		testAddChallengeWithoutAdminInSystem();
		testAddChallengeWithAdminInSystem();
		)
end FitnessAppTest