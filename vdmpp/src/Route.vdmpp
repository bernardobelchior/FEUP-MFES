-- Represents a route taken in an activity. 
class Route
values
	-- Earth radius in kilometers
	public EARTH_RADIUS: real = 6373;
instance variables
	-- Points this route goes through.
	points: seq of Types`Point := [];
	
	-- This route's name.
	name: seq of char;
	
	-- Ensure sure this route always has at least 2 points.
	inv len points > 1;
operations
	public Route: seq of char * seq of Types`Point ==> Route 
	Route(n, ps) == (
			name := n;
			points := ps;
		)
		post len points = len ps and points = ps and name = n; 
		
	-- Returns the route's name.
	public getName: () ==> seq of char
	getName() == return name;	
	
	-- Returns the points this route goes through
	public getPoints: () ==> seq of Types`Point
	getPoints() == return points;
		
	-- Calculates the real distance between Points
 	public getDistance: () ==> real
 	getDistance() == (
	dcl totalDistance: real := 0;
 	
 	-- Source: http://www.geodatasource.com/developers/javascript
	dcl upperBound: real := (len points) - 1;
	for i = 1 to upperBound do (
			dcl radLat1: real := MATH`pi * points(i).lat / 180;
			dcl radLat2: real := MATH`pi * points(i+1).lat / 180;
			dcl theta: real := points(i).long - points(i+1).long;
			dcl radTheta: real := MATH`pi * theta / 180;
			dcl dist: real := MATH`sin(radLat1) * MATH`sin(radLat2) + MATH`cos(radLat1) * MATH`cos(radLat2) * MATH`cos(radTheta);
			dist := MATH`acos(dist);
			dist := dist * 180 / MATH`pi;
			dist := dist * 60 * 1.1515;
			dist := dist * 1.609344;
			totalDistance := totalDistance + dist;
		);
		
		return totalDistance;
 );
end Route