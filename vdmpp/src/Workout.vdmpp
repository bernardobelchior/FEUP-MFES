class Workout
types
values
-- TODO Define values here
instance variables
	distance: real := 0; -- In km
	caloriesBurned: real := 0; -- In km
	averageRhythm: real := 0; -- In min/km
	duration: real := 0; -- In min
	startDateTime: Types`DateTime;
	activity: Types`Activity;
	points: seq of Types`Point := [];
	title: seq of char;
	public route: [Route] := nil;
	public description: seq of char;

	inv distance >= 0; 
	inv caloriesBurned >= 0; 
	inv averageRhythm >= 0;
operations
	
	public Workout: seq of char * Types`DateTime * Types`Activity * Types`Point ==> Workout
	Workout(t, sd, a, p) == (
		title := t;
		startDateTime := sd;
		activity := a;
		points := points ^[p];
	)
	post startDateTime = sd and activity = a and title = t and len points > 0 and points(len points) = p and route = nil;

	public addPoint: Types`Point ==> ()
	addPoint(p) == points := points ^ [p]
		post len points > 0 and points(len points) = p;
		
	public getPoints: () ==> seq of Types`Point
	getPoints() == return points;
	
	public getTitle: () ==> seq of char
	getTitle() == return title;
	
	public endWorkout: User * real ==> ()
	endWorkout(user, d) == (
		duration := d;
		distance := calculateDistance();
		caloriesBurned := distance * user.weight * 1.036;
		averageRhythm := distance / duration;
	);
	
	public calculateDistance: () ==> real -- returns in kms
	 calculateDistance() == (
		dcl totalDistance: real := 0;
	 	
	 	-- Font: http://www.geodatasource.com/developers/javascript 
		dcl upperBound: real := (len points) - 1;
		for i = 1 to upperBound do (
				dcl radLat1: real := MATH`pi * points(i).lat / 180;
				dcl radLat2: real := MATH`pi * points(i+1).lat / 180;
				dcl theta: real := points(i).long - points(i+1).long;
				dcl radTheta: real := MATH`pi * theta / 180;
				dcl dist: real := MATH`sin(radLat1) * MATH`sin(radLat2) + MATH`cos(radLat1) * MATH`cos(radLat2) * MATH`cos(radTheta);
				dist := MATH`acos(dist);
				dist := dist * 180 / MATH`pi;
				dist := dist * 60 * 1.1515;
				dist := dist * 1.609344;
				totalDistance := totalDistance + dist;
			);
			
			return totalDistance;
	 );
	 
	 public getDistance: () ==> real
	 getDistance() == return distance;
	 
	 public getAverageRhythm: () ==> real
	 getAverageRhythm() == return averageRhythm;
	 
	 public getCaloriesBurned: () ==> real
	 getCaloriesBurned() == return caloriesBurned;
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Workout