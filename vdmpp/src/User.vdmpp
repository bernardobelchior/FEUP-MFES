class User
instance variables
	-- User's first name
	protected firstName: seq of char;

	-- User's last name
	protected lastName: seq of char;

	-- Workouts the user has completed
	protected workouts: set of Workout := {};
	
	-- Routes the user has created
	protected myRoutes: set of Route := {};
	
	-- Friends the user has added
	protected friends: set of User := {};	
	
	-- User's email
	protected email: seq of char;
	
	-- User's password
	protected password: seq of char;

	-- User's gender
	public gender: Types`Gender;
	
	-- User's weight in kilograms
	public weight: real;
	
	-- User's height in meters
	public height: real;
	
	-- Restricts some invalid emails. At least 5 characters are needed to write a simple e-mail, eg.: a@b.c
	inv len email >= 5; 
operations
	public User : seq of char * seq of char * seq of char * seq of char * real * real * Types`Gender ==> User
	User(fName, lName, mail, passw, w, h, g) == (
		firstName := fName;
		lastName := lName;
		email := mail;
		password := passw;
		weight := w;
		height := h;
		gender := g;
	)
	pre len mail >= 5 and len passw >= 8 and h > 0 and w > 0
	post firstName = fName and lastName = lName and email = mail and password = passw and weight = w and height = h and gender = g;
		
	-- Adds a route to user's routes
	public addRoute: Route ==> ()
		addRoute(route) == myRoutes := myRoutes union {route}
		post route in set myRoutes;
	
	-- Adds a complete workout to the set of complete workouts
	public addWorkout: Workout ==> ()
		addWorkout(workout) == workouts := workouts union {workout}
		post workout in set workouts;

	-- Add a friend to user's set of friends
	public addFriend: User ==> ()
		addFriend(f) == (
			friends := friends union {f};
			if self not in set f.getFriends()
			then f.addFriend(self);
		)
		pre f <> self
		post f in set friends;
		
	-- Returns the user's workouts
	public getWorkouts: () ==> set of Workout 
	getWorkouts() == return workouts;
		
	-- Returns the user's first name
	public getFirstName: () ==> seq of char
	getFirstName() ==	return firstName;

	-- Returns the user's last name
	public getLastName: () ==> seq of char
	getLastName() == return lastName;
		
	-- Returns the user's routes
	public getRoutes: () ==> set of Route
	getRoutes() == return myRoutes;

	-- Returns the user's friends
	public getFriends: () ==> set of User
	getFriends() == return friends;

	-- Returns the user's email
	public pure getEmail: () ==> seq of char
	getEmail() == return email;
	
	-- Checks if the email and password combination matches
	public checkLogin: seq of char * seq of char ==> bool 
	checkLogin(mail, passw) == (
		return email = mail	and password = passw;
	)
	post RESULT = (email = mail and password = passw);
end User