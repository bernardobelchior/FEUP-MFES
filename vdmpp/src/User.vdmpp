class User
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	protected firstName: seq of char;
	protected lastName: seq of char;
	protected workouts: set of Workout := {};
	protected myRoutes: set of Route := {};
	protected goals: set of Goal := {};
	protected friends: set of User := {};	
	protected email: seq of char;
	protected password: seq of char;

	public gender: Types`Gender;
	public weight: [real] := nil; -- in kilograms
	public height: [real] := nil; -- in meters
	
	inv weight = nil or weight > 0;
	inv height = nil or height > 0;
	inv len email >= 5; -- for the @ and . symbols
	--inv len password >= 8;
operations
	public User : seq of char * seq of char * seq of char * seq of char * real * real * Types`Gender ==> User
	User(fName, lName, mail, passw, w, h, g) == (
		firstName := fName;
		lastName := lName;
		email := mail;
		password := passw;
		weight := w;
		height := h;
		gender := g;
	)
	pre len mail >= 5 and len passw >= 8
	post firstName = fName and lastName = lName and email = mail and password = passw and weight = w and height = h and gender = g;
		
	public addRoute: Route ==> ()
		addRoute(route) == myRoutes := myRoutes union {route}
		post route in set myRoutes;
	
	public addWorkout: Workout ==> ()
		addWorkout(workout) == workouts := workouts union {workout}
		post workout in set workouts;

	public addGoal: Goal ==> ()
		addGoal(goal) == goals := goals union {goal}
		post goal in set goals;
		
	public addFriend: User ==> ()
		addFriend(f) == (
			friends := friends union {f};
			if self not in set f.getFriends()
			then f.addFriend(self);
		)
		-- pre self <> f
		post f in set friends;
		
	public getWorkouts: () ==> set of Workout 
	getWorkouts() == return workouts;
		
	public getFirstName: () ==> seq of char
	getFirstName() ==	return firstName;

	public getLastName: () ==> seq of char
	getLastName() == return lastName;
		
	public getMyRoutes: () ==> set of Route
	getMyRoutes() == return myRoutes;

	public getFriends: () ==> set of User
	getFriends() == return friends;

	public getGoals: () ==> set of Goal
	getGoals() == return goals;
	
	public getEmail: () ==> seq of char
	getEmail() == return email;

	public getPassword: () ==> seq of char
	getPassword() == return password;

	public checkLogin: seq of char * seq of char ==> bool 
	checkLogin(mail, passw) == (
		return email = mail	and password = passw;
	)
	post RESULT = (email = mail and password = passw);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end User