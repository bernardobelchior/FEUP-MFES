class Workout
types
values
-- TODO Define values here
instance variables
	distance: real := 0; -- In km
	caloriesBurned: real := 0; -- In km
	averageRhythm: real := 0; -- In min/km
	time: Types`Time := mk_Types`Time(0, 0, 0);
	startDateTime: Types`DateTime;
	activity: Types`Activity;
	points: seq of Types`Point := [];
	title: seq of char;
	public route: [Route] := nil;
	public description: seq of char;

	inv distance >= 0; 
	inv caloriesBurned >= 0; 
	inv averageRhythm >= 0;
operations
	public Workout(t: seq of char, sd: Types`DateTime, a: Types`Activity, p: Types`Point) res: Workout == (
		title := t;
		startDateTime := sd;
		activity := a;
		points := points ^[p]
	)
	post startDateTime = sd and activity = a and title = t and len points > 0 and points(len points) = p and route = nil;

	public addPoint(p: Types`Point) ==
		points := points ^ [p]
		post len points > 0 and points(len points) = p;
		
	public getPoints() res: seq of Types`Point ==
		return points;
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Workout