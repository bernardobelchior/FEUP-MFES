class MaxCaloriesChallengeTest is subclass of Test
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations
	public createMaxCaloriesChallenge() res: Challenge == 
		return new MaxCaloriesChallenge("Testing Challenge", "Lets test Challenge class", mk_Types`Date(2017,12,24), mk_Types`Date(2017,12,30), 300);
		
	public createUser() res: User ==
		return new User("Bernardo", "Belchior");	
		
	public testMaxCaloriesChallenge() == (
		dcl c: MaxCaloriesChallenge := createMaxCaloriesChallenge();
		assert(c.getName() = "Testing Challenge");
		assert(c.getDescription() = "Lets test Challenge class");
		assert(c.getStartDate() = mk_Types`Date(2017,12,24));
		assert(c.getEndDate() = mk_Types`Date(2017,12,30));
		assert(c.getCaloriesChallenged() = 300);
	);
	
	public testCompleteMaxCaloriesChallenge() == (
		dcl c: MaxCaloriesChallenge := createMaxCaloriesChallenge();
		dcl u: User := createUser();
		c.addCompletedUser(u);
		assert(u in set elems c.getCompleted());
	);
	
	public testVerifyCaloriesCompleted() == (
		dcl c: MaxCaloriesChallenge := createMaxCaloriesChallenge();
		dcl u: User := createUser();
		dcl d: real := 400;
		c.verifyChallenge(u, d);
		assert(u in set elems c.getCompleted());
	);
	
	public testVerifyCaloriesNotCompleted() == (
		dcl c: MaxCaloriesChallenge := createMaxCaloriesChallenge();
		dcl u: User := createUser();
		dcl d: real := 200;
		c.verifyChallenge(u, d);
		assert(u not in set elems c.getCompleted());
	);
	
	public test() == (
		testMaxCaloriesChallenge();
		testCompleteMaxCaloriesChallenge();
		testVerifyCaloriesCompleted();
		testVerifyCaloriesNotCompleted();
	)

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end MaxCaloriesChallengeTest