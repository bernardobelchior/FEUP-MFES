class User
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	firstName: seq of char;
	lastName: seq of char;
	workouts: set of Workout := {};
	myRoutes: set of Route := {};
	goals: set of Goal := {};
	friends: set of User := {};	
	
	public gender: Types`Gender;
	public weight: [real] := nil; -- in kilograms
	public height: [real] := nil; -- in meters
	
	inv weight = nil or weight > 0;
	inv height = nil or height > 0;
operations
	public User(fName: seq of char, lName: seq of char) res: User == (
		firstName := fName;
		lastName := lName;
	)
		post res.firstName = fName and res.lastName = lName;

	public addRoute(route: Route) == 
		myRoutes := myRoutes union {route}
		post route in set myRoutes;
	
	public addWorkout(workout: Workout) == 
		workouts := workouts union {workout}	
		post workout in set workouts;

	public addGoal(goal: Goal) == 
		goals := goals union {goal}	
		post goal in set goals;
		
	public addFriend(f: User) ==
		friends := friends union {f}
		-- pre self <> f
		post f in set friends;
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end User